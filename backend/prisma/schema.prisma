// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PATIENT
  PRACTITIONER
  ADMIN
}

enum UserStatus {
  ACTIVE
  PENDING
  SUSPENDED
  INACTIVE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SessionType {
  VIDEO_CALL
  IN_PERSON
  PHONE_CALL
}

model User {
  id              String     @id @default(cuid())
  email           String     @unique
  firstName       String
  lastName        String
  password        String
  role            UserRole   @default(PATIENT)
  status          UserStatus @default(ACTIVE)
  isEmailVerified Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Profile relationships
  patientProfile      PatientProfile?
  practitionerProfile PractitionerProfile?
  adminProfile        AdminProfile?

  // Other relationships
  subscription Subscription?

  // Booking relationships
  patientBookings      Booking[] @relation("PatientBookings")
  practitionerBookings Booking[] @relation("PractitionerBookings")

  @@map("users")
}

model PatientProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Personal Information
  dateOfBirth  DateTime?
  gender       Gender?
  phone        String?   // Changed from phoneNumber to phone
  profileImage String?

  // Address
  street  String?
  city    String?
  state   String?
  zipCode String?
  country String?

  // Emergency Contact
  emergencyContactName         String?
  emergencyContactRelationship String?
  emergencyContactPhone        String?

  // Medical Information
  medicalHistory String[] // Array of conditions
  allergies      String[] // Array of allergies
  medications    String[] // Array of current medications

  // Insurance Information
  insuranceProvider     String?
  insurancePolicyNumber String?
  insuranceGroupNumber  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patient_profiles")
}

model PractitionerProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Professional Information
  licenseNumber   String   @unique
  specializations String[] // Array of specializations
  bio             String?
  experience      Int      @default(0) // Years of experience
  profileImage    String?

  // Contact Information
  phone String? // Changed from phoneNumber to phone for consistency

  // Financial Information
  consultationFee Float @default(0)

  // Languages
  languages String[] // Array of languages spoken

  // Verification Status
  verificationStatus    VerificationStatus @default(PENDING)
  verificationDocuments String[] // Array of document URLs

  // Education
  education Education[]

  // Certifications
  certifications Certification[]

  // Availability
  availability Availability[]

  // Time slots for booking
  timeSlots TimeSlot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("practitioner_profiles")
}

model AdminProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Admin Information
  department   String?
  permissions  String[] // Array of permission strings
  profileImage String?
  phone        String?  // Changed from phoneNumber to phone for consistency

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_profiles")
}

model Education {
  id             String              @id @default(cuid())
  practitionerId String
  practitioner   PractitionerProfile @relation(fields: [practitionerId], references: [id], onDelete: Cascade)

  degree      String
  institution String
  year        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("education")
}

model Certification {
  id             String              @id @default(cuid())
  practitionerId String
  practitioner   PractitionerProfile @relation(fields: [practitionerId], references: [id], onDelete: Cascade)

  name       String
  issuer     String
  issueDate  DateTime
  expiryDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("certifications")
}

model Availability {
  id             String              @id @default(cuid())
  practitionerId String
  practitioner   PractitionerProfile @relation(fields: [practitionerId], references: [id], onDelete: Cascade)

  dayOfWeek   Int     // 0-6 (Sunday-Saturday)
  startTime   String  // "09:00"
  endTime     String  // "17:00"
  isAvailable Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([practitionerId, dayOfWeek])
  @@map("availability")
}

model Subscription {
  id       String @id @default(cuid())
  userId   String @unique
  planType String
  status   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model Booking {
  id             String        @id @default(cuid())
  patientId      String
  practitionerId String
  
  // Booking details
  bookingDate    DateTime      // The date and time of the booking
  duration       Int           @default(60) // Duration in minutes
  sessionType    SessionType   @default(VIDEO_CALL)
  status         BookingStatus @default(PENDING)
  
  // Pricing
  fee            Float         @default(0)
  
  // Notes and details
  patientNotes   String?       // Notes from patient when booking
  practitionerNotes String?    // Notes from practitioner
  
  // Cancellation details
  cancelledAt    DateTime?
  cancelledBy    String?       // User ID who cancelled
  cancellationReason String?
  
  // Relationships
  patient        User          @relation("PatientBookings", fields: [patientId], references: [id], onDelete: Cascade)
  practitioner   User          @relation("PractitionerBookings", fields: [practitionerId], references: [id], onDelete: Cascade)
  
  // Related session
  session        Session?
  
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  @@map("bookings")
}

model Session {
  id           String        @id @default(cuid())
  bookingId    String        @unique
  booking      Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  // Session details
  status       SessionStatus @default(SCHEDULED)
  startedAt    DateTime?
  endedAt      DateTime?
  actualDuration Int?        // Actual duration in minutes
  
  // Session content
  notes        String?       // Session notes from practitioner
  diagnosis    String?       // Diagnosis or findings
  prescription String?       // Prescribed medications or treatments
  followUpDate DateTime?     // Next appointment recommendation
  
  // Video call details (if applicable)
  roomId       String?       // Video room ID
  recordingUrl String?       // Recording URL if recorded
  
  // Ratings and feedback
  patientRating      Int?    // 1-5 rating from patient
  practitionerRating Int?    // 1-5 rating from practitioner
  patientFeedback    String? // Patient feedback
  practitionerFeedback String? // Practitioner feedback
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@map("sessions")
}

model TimeSlot {
  id             String              @id @default(cuid())
  practitionerId String
  practitioner   PractitionerProfile @relation(fields: [practitionerId], references: [id], onDelete: Cascade)
  
  // Time slot details
  date           DateTime            // The specific date
  startTime      String              // "09:00"
  endTime        String              // "10:00"
  isAvailable    Boolean             @default(true)
  isRecurring    Boolean             @default(false)
  
  // Recurring details (if applicable)
  recurringType  String?             // "weekly", "daily", etc.
  recurringUntil DateTime?           // End date for recurring slots
  
  // Booking reference (if booked)
  isBooked       Boolean             @default(false)
  bookingId      String?             // Reference to booking if this slot is taken
  
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  
  @@unique([practitionerId, date, startTime])
  @@map("time_slots")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}